<?xml version="1.0" ?>
<SmellBaseline>
  <ManuallySuppressedIssues></ManuallySuppressedIssues>
  <CurrentIssues>
    <ID>BracesOnIfStatements:HomeScreen.kt$if</ID>
    <ID>CommentOverPrivateFunction:LoginViewModel.kt$LoginViewModel$private suspend fun backendLogin( newLoginUIState: LoginUiState )</ID>
    <ID>EndOfSentenceFormat:LoginViewModel.kt$LoginViewModel$* Method to login the user into our backend after the firebase login in order to retrieve the token to authenticate the requests in our backend * * @param newLoginUIState Valid `LoginUIState` retrieved from firebase</ID>
    <ID>ExpressionBodySyntax:BackendRepository.kt$BackendRepositoryImpl$return Result.success(FAKE_GROUP_LIST)</ID>
    <ID>FunctionMaxLength:LocalStoreModule.kt$LocalStoreModule$@Provides @Singleton fun provideSharedPreferencesManager(prefs: SharedPreferences)</ID>
    <ID>LongParameterList:LoginViewModel.kt$LoginViewModel$( private val loginEmailPassUseCase: LoginEmailPassUseCase, private val loginWithGoogleUseCase: LoginWithGoogleUseCase, private val checkUserLoggedInUseCase: CheckUserLoggedInUseCase, private val registerUseCase: RegisterUseCase, private val recoverPassUseCase: RecoverPassUseCase, private val backendRepository: BackendRepository, private val firebaseAuth: FirebaseAuth, val googleSignInClient: GoogleSignInClient, )</ID>
    <ID>MatchingDeclarationName:SealedClasses.kt$StatusResponse</ID>
    <ID>MatchingDeclarationName:SharedPreferenceManager.kt$SharedPreferencesManager</ID>
    <ID>MaxLineLength:LoginViewModel.kt$LoginViewModel$*</ID>
    <ID>NewLineAtEndOfFile:MovieItem.kt$com.digitalsolution.familyfilmapp.ui.screens.search.components.MovieItem.kt</ID>
    <ID>NewLineAtEndOfFile:RegisterResponse.kt$com.digitalsolution.familyfilmapp.model.remote.response.RegisterResponse.kt</ID>
    <ID>NewLineAtEndOfFile:SharedPreferenceManager.kt$com.digitalsolution.familyfilmapp.managers.SharedPreferenceManager.kt</ID>
    <ID>NotImplementedDeclaration:NetworkModule.kt$NetworkModule$TODO()</ID>
    <ID>ThrowingExceptionsWithoutMessageOrCause:BackendRepository.kt$BackendRepositoryImpl$Throwable()</ID>
    <ID>TooGenericExceptionThrown:BackendRepository.kt$BackendRepositoryImpl$throw Throwable()</ID>
    <ID>UnusedPrivateProperty:LoginEmailPassUseCase.kt$LoginEmailPassUseCase$private val localRepository: LocalRepository</ID>
    <ID>UseDataClass:Movie.kt$Genre</ID>
  </CurrentIssues>
</SmellBaseline>
